// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/PenguinParadigm/samvera18apis/simpleDev/generated/models"
)

// RetrieveResourceHandlerFunc turns a function with the right signature into a retrieve resource handler
type RetrieveResourceHandlerFunc func(RetrieveResourceParams, *models.Agent) middleware.Responder

// Handle executing the request and returning a response
func (fn RetrieveResourceHandlerFunc) Handle(params RetrieveResourceParams, principal *models.Agent) middleware.Responder {
	return fn(params, principal)
}

// RetrieveResourceHandler interface for that can handle valid retrieve resource params
type RetrieveResourceHandler interface {
	Handle(RetrieveResourceParams, *models.Agent) middleware.Responder
}

// NewRetrieveResource creates a new http.Handler for the retrieve resource operation
func NewRetrieveResource(ctx *middleware.Context, handler RetrieveResourceHandler) *RetrieveResource {
	return &RetrieveResource{Context: ctx, Handler: handler}
}

/*RetrieveResource swagger:route GET /resource/{ID} retrieveResource

Retrieve TAQUITO Resource Metadata.

Retrieves the metadata (as JSON-LD) for an existing TAQUITO resource as identified by the TAQUITO identifier.

*/
type RetrieveResource struct {
	Context *middleware.Context
	Handler RetrieveResourceHandler
}

func (o *RetrieveResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRetrieveResourceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Agent
	if uprinc != nil {
		principal = uprinc.(*models.Agent) // this is really a models.Agent, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
